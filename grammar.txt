<program>		::= <expr> (; <expr>)*

<func>          ::= function <identifier> \(<identifier> (, <identifier>)*\) {<program>}

<funcCall>      ::= <identifier> \(<parameters>\)

<parameters>    ::= (<identifier> | <bool> | <number>) (, (<identifier> | <bool> | <number>))*

<ifOp>          ::= if \(<condition>\) {<program>} (else {<program>})?

<whileOp>       ::= while \(<condition>\) {<program>}

<expr>          ::= <unaryExpr> | <condition> | <assignment> | <mathExpr> | <funcCall> | <ifOp> | <whileOp> | <func> | <number>

<printOp>       ::= print <identifier>

<mathExpr>      ::= (<number> | <identifier>) <numOp> (<number> | <identifier>)

<unaryExpr>     ::= (<number> | <identifier>) <unaryOp>

<condition>     ::= <bool> | <comparison>

<assignment>    ::= <identifier> (:= | += | -= | *= | /=) <expr>

<comparison>    ::= (<number> | <identifier>) <boolOp> (<number> | <identifier> | <bool>)

<boolOp>        ::= > | >= | < | <= | == | !=

<numOp>         ::= + | - | * | /

<unaryOp>       ::= ++ | --

<bool>          ::= true | false

<identifier>    ::= [_a-zA-Z][_a-zA-Z0-9]*

<number>        ::= -?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d+)?